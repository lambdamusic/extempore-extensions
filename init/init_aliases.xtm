;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; COMPATIBILITY MODE / ALIASES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define ran random)
(define oct octave)


;; legacy implementation mappings

(define playkit playk)
(define kit playk)



(define sorta cl:sort-asc)
(define sortd cl:sort-desc)
(define sortasc cl:sort-asc)
(define sortdesc cl:sort-desc)

(define cdr-or-else if-cdr-else)


(impc:aot:do-or-emit
    (define-macro (:steps . args)
       (println 'WARNING "Function steps deprecated. Use playp.")
    )
)


(define :steps 
  (lambda ()
    (log-info "ERROR: update steps with playp!")
))
(define steps :steps)

(define offset :add)
(define add :add)

(define at-btw atbtw)

(define repeat rep)
(define R rep)

(define sl slice)


(define ifchance if-random)
(define :ifchance if-random)
(define chance if-random) ; 2021-03-07
(define :chance if-random)
(define ifr if-random)
(define ifrnd if-random)

(define :mcc :midicc)
(define midic :midicc)
(define mcc :mcc)


(define mklist :mklist)
(define :mkchord mkchord)
(define :mkchordrandom mkchordrandom )
(define mkchordr mkchordrandom )
(define mkchord-random mkchordrandom )
(define mkchord_r mkchordrandom )
(define :mkchordbystep mkchordbystep )
(define :mkchordsteps mkchordbystep )
(define mkrelscale mkscalestep )
(define mkchordiatonic mkchordia )
(define mkchordiar mkchordiarandom )
(define mkchordiatonicr mkchordiarandom )
(define mkchordia_r mkchordiarandom )
(define mkchordiatonic-random mkchordiarandom )
(define mkchordia-random mkchordiarandom )
(define mkscale :mkscale)
(define mkrel :mkrel )
(define mkint :mkint )
(define mkmelody :mkmelody )
(define pc:quant mkquant)
(define :pcquantize mkquant)
(define pcquantize mkquant)
(define pc:ran mkrandom)
(define pcrandom mkrandom)
(define :pcrandom mkrandom)
(define mkrand mkrandom)


;; old name for legacy compatibility
(impc:aot:do-or-emit
    (define-macro (seq . args)
                `(helper:mmplayp_f_with_offset beat dur *mididevice* ,@args))
)







;
;
; :ARP OLD IMPLEMENTATION  / USE playarp instead!
; Deprecated on 2022-06-03
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Args:
; ----
; offset (opt)
; midi-channel 
; notes
; durs 
; vols 

; 
; Requires:
; --------
; beat 
; *mididevice*
;
; 
; Example:
; --------
; (define piano 1) ;; midi ch
; (let ((beat (*metro* 'get-beat)))
;   (arp piano '(60 67) 4 90) 
;   (arp 2 piano '(60 67) 4 90)  ;; 2 = offset
;   (arp piano (mkchord c4 '^ 4) (:mklist 4 (oneof 1 2 3)) 90)
; )
;
;
; Dependencies:
; -------------------------------
; * helper:arpeggio
; * play (midi version)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
(impc:aot:do-or-emit
  (define-macro (:arp . args)
    ; (println (car args) (len args))
    (cond ((length-equal? args 4)
        ;; 4 args: ch // plist // tlist // vols
        ;; ==> memo: helper:arpeggio takes: beat offset notes durations volumes ch
          `(begin (println ,@args) (helper:arpeggio beat 0 ,(cadr args) ,(caddr args) ,(cadddr args) ,(car args) )))
           ((length-equal? args 5)
        ;; 5 args: offset // ch // plist // tlist // vols
          `(helper:arpeggio beat ,(car args) ,(caddr args) ,(cadddr args) ,(caddddr args) ,(cadr args) )) 
          (else (log-error 'arp: 'arguments 'could 'not 'be 'resolved.))))) 


(define arp :arp)



(define mix :mix)