;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; MIDI CC Functions and Testing Functions for MIDI
;
;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  MIDI CONTROL CHANGE
; default channel is 0 / ensure there is no conflict with Ableton mixer function that are 
; on a different channel *ableton-mixer-midi-channel*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(define *mcc-verbose* #f)
(define *mcc-default-channel* 0)


;
; SEND-MIDI-CC
; ---------------------
;  see https://github.com/digego/extempore/blob/master/libs/external/portmidi.xtm#L877
; not loaded with xtm by default
;
; Example
; (send-midi-cc (now) *mididevice* 5 ;; control change
;                                  120 ;; value
;                                   0 ;; channel
                        ; )
(impc:aot:do-or-emit
 (define send-midi-cc
   (lambda (time device cc val channel)
     (if *mcc-verbose* (println 'mcc cc val))
     (callback time 'pm_send device *midi-cc* channel (real->integer cc) (real->integer val)))))



;
;; :MIDICC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; midi control change shortcut
;; Uses default *mididevice* symbol 
;; Values are set in real-time using now() // [not beat]
;;
;; Args:
; --------
; - control change 
; - value
; - ch midi [optional - default is *mcc-default-channel*]
;
;; Example:
; --------
; (:midicc 49 127) 
; 
;
;; TIP: In order to set up mappings in Live:
 ; 1 - turn on midi learn in Live, select a control 
 ; 2 - send :mcc signal to store mapping
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(impc:aot:do-or-emit
    (define-macro (:midicc . args)
                (if (length-equal? args 2) 
                    ; arg1:cc arg2:value / channel default=0  ==> good for Ableton LIVE
                    `(send-midi-cc (now) ;;(*metro* beat) 
                        *mididevice*
                        (real->integer ,(car args))    ;; control change
                        (real->integer ,(cadr args))   ;; value
                        *mcc-default-channel* ;; channel
                        )
                    ; arg1:cc arg2:value arg3:channel number 0-based
                    `(send-midi-cc (now) ;;(*metro* beat)  
                        *mididevice*
                        (real->integer ,(car args))            ;; control change
                        (real->integer ,(cadr args))           ;; value
                        (real->integer ,(caddr args))     ;; channel 
                        )))
    )









;
;
;; MU:TEST 
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Test MIDI channel with a note 
;
;; both with/without time abstractions
;; Variable num of args
;; MIDI channel is 1-based
;; IMPORTANT need *mididevice*  to be predefined 
;
; Example:
; (define *mididevice* (pm_create_output_stream 1))
; (mu:test 38) ; MIDI channel defaults to 1
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
(impc:aot:do-or-emit
   (define-macro (mu:test . args)
      (cond ((length-equal? args 1) ;; just note
            `(play-midi-note (now) *mididevice* ,(car args) 80 *second* 0))
            ((length-equal? args 2) ; note and midi ch
            `(play-midi-note (now) *mididevice* ,(car args)  80 *second* (- ,(cadr args) 1)))
            ((length-equal? args 3) ;; also mididevice
            `(play-midi-note (now) ,(car args) ,(cadr args)  80 *second* (- ,(caddr args) 1))) 
            (#t (print 'Error: '1 'or '3 'args' 'max))))
)





;
;
;;  MU:TESTCHORD 
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Test MIDI channel with a chord 
;
;; both with/without time abstractions
;; Variable num of args
;; MIDI channel is 1-based
;; IMPORTANT need *mididevice*  to be predefined 
;
; Example:
; (define *mididevice* (pm_create_output_stream 1))
; (mu:testchord '(60 63 67) )
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
(impc:aot:do-or-emit
   (define-macro (mu:testchord . args)
      (cond ((length-equal? args 1) ;; just notes list
            `(for-each (lambda (x)
                        (play-midi-note (now) *mididevice* x 80 *second* 0))
                        ,(car args)))
            ((length-equal? args 2) ;; note + channel 1-based
            `(for-each (lambda (x)
                        (play-midi-note (now) *mididevice* x 80 *second* (- ,(cadr args) 1)))
                        ,(car args)))
            (#t (print 'Error: '1 'or '2 'args' 'max))))

)






;; MU:TESTKIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Play all samples from an Ableton LIVE kit 
;
;; default to 16 samples starting from 36
; (mkscale c2 'chromatic 16) => '(36 ...51)
;;
;; arg1: channel (default:9)
;; 
; Example:
; (mu:testkit 9)
;
(impc:aot:do-or-emit
   (define-macro (mu:testkit . args)
      (cond ((length-equal? args 0) ;; default ch:9
            `(helper:play-plist (*metro* 'get-beat) (mkscale c2 'chromatic 16) 9)) 
            ((length-equal? args 1) ; midi ch
            `(helper:play-plist (*metro* 'get-beat) (mkscale c2 'chromatic 16) ,(car args))) 
            ; `(play-midi-note (now) *mididevice* ,(car args)  80 *second* (- ,(cadr args) 1)))
            (#t (print 'Error: '0 'or '1 'args' 'max))))
)

;; helper:play-plist
;;;;
;; play all midi pitches in a list, one per beat
;; used by mu:testkit, only for testing
(define helper:play-plist
  (lambda (beat lst ch)
      (play ch (car lst) 90 1/8)
    (if (not (null? (cdr lst)))  
    (callback (*metro* (+ beat (* 1/2 1))) 
        'helper:play-plist (+ beat 1) (cdr lst) ch))))




;; MU:TESTSEQ
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; util to play a sequence of midi pitches
;; arg1: channel (default:9)
;; 
(impc:aot:do-or-emit
   (define-macro (mu:testseq . args)
      (cond ((length-equal? args 0) ;; default ch:1 / major chord
            `(helper:play-plist (*metro* 'get-beat) (mkscale c3 'M 9) 1)) 
            ((length-equal? args 1) ; pitch list
            `(helper:play-plist (*metro* 'get-beat) ,(car args) 1)) 
            (#t (print 'Error: '0 'or '1 'args' 'max))))
)










