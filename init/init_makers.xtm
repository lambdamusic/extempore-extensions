;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;
;; helper functions for generatic chords, scales and other musical structures 
;;
;;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;


;
;
; mkchord
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; wrapper around pc:make-chord-fixed
;
; Args:
; root 
; chord-sym [default: '^]
; notes_number [default: 3]
;
; Example:
; (println (mkchord 60 '- 8))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-macro (:mkchord . args)
  ;;(println args)
   (cond ((length-equal? args 1) ;; just root 
         `(pc:make-chord-fixed ,(car args) 3 (pc:chord ,(car args) '^)))
         ((length-equal? args 2) ; root and chord-sym
         `(pc:make-chord-fixed ,(car args) 3 (pc:chord ,(car args) ,(cadr args))))
         ((length-equal? args 3) ;; also notes_number
         `(pc:make-chord-fixed ,(car args) ,(caddr args) (pc:chord ,(car args) ,(cadr args))))         
         (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))))





;
;
; :mkchordrandom
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; wrapper around non-deterministic pc:make-chord (updated on 2020-10-04)
;
; Args:
; root 
; chord-sym [default: '^]
; notes_number [default: 3]
; upper_limit [default: 120]
;
; Example:
; (println (mkchordrandom 60 '- 3 120))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-macro (:mkchordrandom . args)
  ;;(println args)
   (cond ((length-equal? args 1) ;; just root 
         `(pc:make-chord ,(car args) 120 3 (pc:chord ,(car args) '^)))
         ((length-equal? args 2) ; root and chord-sym
         `(pc:make-chord ,(car args) 120 3 (pc:chord ,(car args) ,(cadr args))))
         ((length-equal? args 3) ;; also notes_number
         `(pc:make-chord ,(car args) 120 ,(caddr args) (pc:chord ,(car args) ,(cadr args))))  
         ((length-equal? args 4) ;; also upper-limit
         `(pc:make-chord ,(car args) ,(cadddr args) ,(caddr args) (pc:chord ,(car args) ,(cadr args))))         
         (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))))





; 
; used in :mkchordbystep
(define *default_scale_len* 24)


; 
; :MKCHORDBYSTEP // 1-based (= tonic)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Returns a chord based on steps of a scale. Eg (:mkchordbystep 60 '(1 3 5) 'ionian  ) ; => tonic chord ie (60 64 67)
; Optional args are: relative pitch (default: none) 
; To determine the scale, accepts either a scale/mode (defaults ionian) or a M/m symbol. 
; When a relative pitch is passed, the steps calculation begins from that pitch (if it exists in the scale)
;
; Examples:
; (:mkchordbystep c4 '(1 3) 'M  ) ; => (60 64)
; (:mkchordbystep 60 '(1 3 7) 'ionian  ) ; => (60 64 71)
; (:mkchordbystep 60 '(1 3 7) 'ionian 62) ; => (62 65 72)  / start from D, in C Major
; (:mkchordbystep 60 '(1 3 7) 'ionian 73) ; => (74 77 84)  / quantize 73 to 74 cause it's not in scale
;
; See also
; (pc:melody-by-step 60 '(0 2) '(0 4 7)) ;=>'(60 60 67) 
;
(define :mkchordbystep
  (lambda (seed steps scale . args)
  ; (println args)
   (cond ((null? args) ;; default
          (takel steps (:mkscale seed scale *default_scale_len* )))      
          ;
          ((length-equal? args 1) 
            ;; 1 arg: relative pitch 
            ;; EG in C-major, D => starting from D, take 1, 3, 5
            (let ((sc (:mkscale seed scale *default_scale_len* ))) 
                ; (println (list-split-from (cadr args) sc)) 
                (if (member (car args) sc) 
                    (takel steps (list-split-from (car args) sc))
                    (begin 
                      (log-info "Error: Pitch not in scale. Quantizing..")
                      (takel steps (list-split-from (mkquant (car args) sc) sc)))
                )))  
          ;
          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))              
      )
    )          
) 










;
;
; helper:multiply_octaves
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; helper function: from a list, extend it by adding 12 to all elements (one octave)
;
; Args:
;
; Example:
; (helper:multiply_octaves (pc:scale 0 'ionian) 2)) 
;; => retuns 2 octaves of the scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define helper:multiply_octaves 
  (lambda (scale octaves)
    (if (= octaves 1)
      scale)
      (dotimes (i octaves)
        (if (> i 0)
          (set! scale (append scale (add (* 12 i) scale)))))
          scale))





;
;
; :mkscale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; wrapper around pc:scale with some defaults
;
; Args:
; root    [default: 60]
; mode    [default: 'ionian]
; num-notes [default: 1 octave / 7 notes]
; octaves [default: 1]
;
;
; Example:
; (:mkscale 60) ;=> 7 notes, ionian
; (:mkscale 60 'aeolian) ;=> 7 notes, aeolian
; (:mkscale 60 'm) ;=> 7 notes, aeolian
; (:mkscale 60 'aeolian 5) ;=> 5 notes
; (:mkscale 60 'aeolian 0 3) ;=> 3 octaves (notes arg is ignored)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define :mkscale
  (lambda (root . args)
  ; (println args)
   (cond ((null? args) ;; default
          (add root (pc:scale 0 'ionian)))   
          ;
          ((length-equal? args 1) 
           ;; 1 arg = scale symbol only  
           (add root (pc:scale 0 (car args))))
          ((length-equal? args 2) 
            ;; 2 args: scale, num-notes 
            ;; factor: calc how big the scale before slicing. 5 is the min lenght of a scale. We double that based on on the num-notes parameter
            (let* ((factor (+ (real->integer (/ (cadr args) 5)) 1)) 
                   (s1 (helper:multiply_octaves (pc:scale 0 (car args)) factor)))
              (slice (cadr args) (add root s1))))
          ;
          ((length-equal? args 3) 
            ;; 3 args: scale, num-notes (ignored), octaves 
            ;; added for backward compatibility
            (add root (helper:multiply_octaves (pc:scale 0 (car args)) (caddr args))))
          ;
          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))              
      )
    )          
)            





;
;
; MKSCALESTEP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; make a scale from a scale step - 1-based (= tonic)
; 
; Makes a scale and allows passing an pitch value to transpose it
; The pitch value is used to get a new note from the pitch class.
; IE Combines mkscale and pc:relative
;
; TODO more testing needed
;
; Args:
; root    [eg: 60]
; reldegree    [eg: int, positive or negative]
; mode    [eg: 'ionian]
; num-notes [eg: 1]
;
;
; Example:
; (mkscale 60 'ionian 3)     ;; '(60 62 64)
; (mkscalestep 60 0 'ionian 3) ;; '(60 62 64)
; (mkscalestep 60 2 'ionian 3) ;; '(64 66 68) => take 2nd pitch from ionian pitch class, get note and start new scale from that note
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define mkscalestep
  (lambda (root step . args)
   (if (= step 0 ) (set! step 1))
   (cond ((length-equal? args 1)
           ;; 1 arg = just the scale symbol / len default=8
            (:mkscale (pc:relative root (- step 1)  (pc:scale root (car args))) (car args) 8))
         ((length-equal? args 2) 
           ;; 2 arg = scale symbol and len
           (:mkscale (pc:relative root (- step 1)  (pc:scale root (car args))) (car args) (cadr args)))
          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))))) 




(define *maxpitch* 110)
(define *minpitch* 10)

; Intervals are abbreviated with m for minor, M for major, d for diminished, A for augmented, P for perfect.
;; current implementation only has major and minor (perfect is implicit)
;; TODO d for diminished, A for augmented
(define *interval-quality* (list 'M 'm)) 


;; turn a pitch class step interval notation to a more traditional interval notation
;; eg 
;; intervallo di 1 = same note VS 0 in pc steps
;; intervallo di 2 = next pitch in scale VS 1 in pc steps
;; intervallo di 4 = quarta eg 'fa' in do maggiore VS 3 in pc steps
;; intervallo di 8 = ottava VS 7 in pc steps
;
(define helper:pc_to_interval
  (lambda (pcstep)
    (cond	((> pcstep 0)
            (- pcstep 1))
          ((< pcstep 0)
            (+ pcstep 1))
          (else 0))
    )
)  





;
; helper for :mkint    
; calculate the interval using pc classes
; if results is not within the max/min range, then return the range boundaries (quantized for the requested scale!)
; ; https://en.wikipedia.org/wiki/Interval_(music)#Interval_number_and_quality
(define helper:mkint-inner
  (lambda (root degree scale_or_quality)

    ; QUALITY interval => turn into scale
    (if (equal? scale_or_quality 'M)
        (set! scale_or_quality 'ionian))
    (if (equal? scale_or_quality 'm)
        (set! scale_or_quality 'aeolian))
         
    ; SCALE interval
    (let ((out (pc:relative root (helper:pc_to_interval degree) (pc:scale 0 scale_or_quality))))  
      (if (> out *maxpitch*)
        (set! out (pc:relative *maxpitch* 0 (pc:scale 0 scale_or_quality)))  
        (if (< out *minpitch*)
          (set! out  (pc:relative *minpitch* 0 (pc:scale 0 scale_or_quality)))))  
          out)  
    )
)
          



;
;
; :mkint
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Returns a new pitch at the desired interval 
; To determine the interval quality, accepts either a scale/mode (defaults major/ionian) or a M/m symbol.  
;
; WHEN PASSING A SCALE (MODE)
; The interval is also *quantised* using that scale
;
; WHEN PASSING AN INTERVAL QUALITY (eg M/m/A/D)
; The interval gets calculated using the semitones count only
;
; INTERVAL NUMBERS e.g. 1, 2, 3.. 
; We use the traditional notation (differently from the numbers used in pc:relative)
; That is: 
;; intervallo di 1 = unison (VS 0 in pc steps)
;; intervallo di 2 = next pitch in scale (VS 1 in pc steps)
;; intervallo di 4 = quarta eg 'fa' in do maggiore (VS 3 in pc steps)
;; intervallo di 8 = ottava (VS 7 in pc steps)
;
; ===Examples with Scales===
; (:mkint 60 0) => 60  (default scale: ionian)
; (:mkint 60 1) => 60
; (:mkint 60 2) => 62
; (:mkint 60 -1) => 60
; (:mkint 60 -2) => 59
; (:mkint 60 3) => 64
; (:mkint 60 3 'aeolian) => 63
; (:mkint 61 2) => 62 / major second in c (with quantization) 
; (:mkint 110 20) => 110  ;; maxlimit kicks in
; (:mkint 30 -40) => 10   ;; minlimit kicks in
;
;
; ===Examples with Qualities eg M/m===
; (:mkint 60 2 'M)  => 62
; (:mkint 60 3 'm)  => 63
; (:mkint 102 5 'M)  => 109
; (:mkint 105 5 'M)  => 105 ;; maxlimit kicks in
(define :mkint
  (lambda (root degree . args)
  ; (println args)
   (cond ((null? args) 
        ; 0 args: return a 'major' interval using the 'ionian mode
        (helper:mkint-inner root degree 'ionian))     
        ((length-equal? args 1) 
        ;; 1 arg: use whatever scale-mode symbol is passed
        (helper:mkint-inner root degree (car args)))
      ;
      (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))               
      )
    )          
) 









;
;
; helper:mkmelody:pcrel
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; helper function: generate a random melody using pc:rel, a 
; root note and a list of relative steps variations
;
;
; Example:
; (helper:mkmelody:pcrel 4 60 'm '(-1)) 
; => (60 58 56 55)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define helper:mkmelody:pcrel
  (lambda (len startp scale stepslst)
      (let loop ((i 0)
                  (lst (list startp)))  
        ; (println lst)
        (if (< i (- len 1))
          (loop (+ i 1)
            (cons (pc:relative (car lst)
              (random stepslst)
              (pc:scale 0 scale))
            lst))   
          (reverse lst))))) 




;
;
; mkmelody
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generates a random melody
;
; Args:
; number-of-notes 
; root [default: 60|c4]
; scale-mode [default: 'M]
; steps-variation [default: '(1 -1)]
;
; Example:
; (println (:mkmelody 4 60 'm '(-1) )) ; => (60 58 56 55)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define :mkmelody
  (lambda (len . args)
  ; (println args)
   (cond ((null? args) ;; default / number-of-notes
          (helper:mkmelody:pcrel len c4 'M '(1 -1)))    
          ;
          ((length-equal? args 1) 
           ;; 1 arg = root
           (helper:mkmelody:pcrel len (car args) 'M '(1 -1))) 
          ((length-equal? args 2) 
            ;; 2 args: root AND scale-mode
            (helper:mkmelody:pcrel len (car args) (cadr args) '(1 -1) )) 
          ;
          ((length-equal? args 3) 
            ;; 3 args: root AND scale-mode AND variations-list
            (helper:mkmelody:pcrel len (car args) (cadr args) (caddr args) )) 
          ;
          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))              
      )
    )          
)        






;
;
; mkrel // 2022-01-30: DEPRECATED, it's the same as mkint
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Shortcut for pc:relative / returns a single note
;
; Args:
; root    [eg: 60]
; reldegree    [eg: int, positive or negative]
; mode    [eg: 'ionian]
;
;
; Example:
; (mkrel 60 0 'pentatonic) ;; 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define :mkrel
  (lambda (root degree mode)
        (car (mkscalestep root degree mode))))



;
;
; MKRANDOM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Wrapper around standard pc:random 
;;
;; Allows passing a scale symbol, or any list of pitches.
;; (original only allows a 0-11 pitch class list)
;; 
; WHEN PASSING A LIST OF PITCH CLASSES
; It behaves just like pc:random. The plist defines (eg scale or chord) the random selection options.
;
; WHEN PASSING A QUALITY OR SCALE MODE (eg M/m/aeonian/dorian)
; It defauls to C as root. So all scales are C scales.
; 
;; Examples
; (mkrandom 60 70 'M) ; => 60
; (mkrandom 60 70 (:mkscale 61 'M)) ; => 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define mkrandom
    (lambda (lower upper pitch-list-or-sym)
      (let ((scale pitch-list-or-sym))
        (if	(atom? scale)
            (set! scale (:mkscale 60 pitch-list-or-sym)))
        (pc:random lower upper 
            (map (lambda (x)
                    (modulo x 12))
                scale)
            ))))



;
;
; :MKQUANT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Wrapper around standard pc:quantize
;;
;; Allows passing a scale symbol, or any list of pitches.
;; (original only allows a 0-11 pitch class list) 
;;
; WHEN PASSING A LIST OF PITCH CLASSES
; It behaves just live pc:quantize. The plist (eg scale or chord) defines the random selection options.
;
; WHEN PASSING A QUALITY OR SCALE MODE (eg M/m/aeonian/dorian)
; It defauls to C as root. So all scales are C scales.
; 
;; Examples
; (mkquant 60 'M) ; => 60
; (mkquant 60 (:mkscale d0 'M)) ; => 61 / the 7th degree in dM
;
; NOTE pc:quantize always selects a higher value before a lower value where distance is equal.
; https://extempore.michelepasin.org/def/pc-quantize.html
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define mkquant
    (lambda (pitch-in pitch-list-or-sym)
      (let ((scale pitch-list-or-sym))
        (if	(atom? scale)
            (set! scale (:mkscale 60 pitch-list-or-sym)))
        (pc:quantize pitch-in 
            (map (lambda (x)
                    (modulo x 12))
                scale)      
            ))))








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper method for 'octave' 
;; example
;; (in-octave 60 1 3) ; +> 12
;; 2023-08-08: always return a pitch even when octave int is wrong
(define to-octave 
  (lambda (pitch min max)
    (if (or (< min 1) (< max 1) (> min 9) (> max 9))
        (begin  
          (log-info "Octaves number should be between 1 and 9. 5=60/c4")
          pitch) 
        (let ((octavemin (* min 12)) 
              (octavemax (* max 12)))   
          (if (or (< pitch octavemin) (> pitch octavemax)) 
            (add (pc:pc pitch) octavemin)  
            pitch))))) 
    


;; OCTAVE 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Move a pitch to a different octave range, within with min/max boundaries.
;
;; arg1: pitch or pitch-list
;; arg2: min boundary (if not provided, 1)
;; arg3: max boundary (if not provided, min +1)
;
;;  Octave 1 = c0 = 12  // 1st octave starts
;;  Octave 2 = c1 = 24  
;;  Octave 3 = c2 = 36  // 3rd octave starts
;;  Octave 4 = c3 = 48
;;  Octave 5 = c4 = 60  // 5th octave starts
;;  Octave 6 = c5 = 72
;;  Octave 7 = c6 = 84  // 7th octave starts
;;  Octave 8 = c7 = 96
;;  Octave 9 = c8 = 108
;
;; Examples
; (octave 10) ; +> 22 / simply add 12 semitones
; (octave '(10 20)) ; +> (22 32) / add 12 semitones to a list
; (octave 60 3) ; 36 / move to 3rd octave
; (octave 60 3 6) ; 60 / move to octave between 3rd and 6th
; (octave '(60 72) 3 6) ; (60 72) / move list to octave between 3rd and 6th 
;;
(define octave
  (lambda (plist . args)
  ; (println args)
   (cond ((null? args) 
          ;; 1 arg  - plist => intervallo di ottava
          (add 12 plist))   
          ((length-equal? args 1) 
           ;; 2 arg = plist and min boundary => max boundary inferred as min+1
           (if (list? plist) 
                  (map (lambda (x)
                      (to-octave x (car args) (+ (car args) 1)))  
                    plist) 
                (to-octave plist (car args) (+ (car args) 1))) 
           )  
            
          ((length-equal? args 2) 
            ;; 3 args: plist, min boundary, max boundary
           (if (list? plist) 
                  (map (lambda (x)
                      (to-octave x (car args) (cadr args)))  
                    plist) 
                (to-octave plist (car args) (cadr args))) 
           ) 
          ;
          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))              
      )
    )          
)   




; fifth, sixth etc..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Shortcuts for incrementing pitch using intervals
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
;

(define-macro (seventhdom plist)
 `(add 10 ,plist))
(define-macro (seventhmaj plist)
 `(add 11 ,plist))
(define-macro (sixth plist)
 `(add 9 ,plist))
(define-macro (fourth plist)
  `(add 5 ,plist))
(define-macro (fifth plist)
   `(add 7 ,plist))
(define-macro (thirdmaj plist)
  `(add 4 ,plist))
(define-macro (thirdmin plist)
  `(add 3 ,plist))

